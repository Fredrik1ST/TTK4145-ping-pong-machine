
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000480  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000480  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  0000051c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d11  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000694  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d0  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000334  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a8 30       	cpi	r26, 0x08	; 8
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a8 e0       	ldi	r26, 0x08	; 8
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 31       	cpi	r26, 0x12	; 18
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 65 00 	call	0xca	; 0xca <main>
  a6:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#define ADC_CONV_TIME 9*ADC_CHANNELS*2/F_CPU*1000000 // Conversion time [microseconds]


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	81 bb       	out	0x11, r24	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
  ba:	89 e0       	ldi	r24, 0x09	; 9
  bc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
  c0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
  c4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
  c8:	08 95       	ret

000000ca <main>:
volatile char *mem_oled_dat = (char *) 0x1200; // Start address for the OLED Data
volatile char *mem_oled_cmd = (char *) 0x1000; // Start address for the OLED commands


int main(void) {
	UART_init(MY_UBBR);
  ca:	8f e1       	ldi	r24, 0x1F	; 31
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a2 00 	call	0x144	; 0x144 <UART_init>
	SRAM_init();
  d2:	0e 94 92 00 	call	0x124	; 0x124 <SRAM_init>
	adc_init();
  d6:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	
	while(1){
		
		mem_adc[0] = 0; // Write anything to trigger the write strobe + chip select to the ADC.
  da:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <mem_adc>
  de:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <mem_adc+0x1>
  e2:	10 82       	st	Z, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8c ec       	ldi	r24, 0xCC	; 204
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x1e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x24>
  ee:	00 00       	nop
		  
		_delay_ms(1); // Give ADC time to convert

		uint8_t adc_ch0 = mem_adc[0]; // Read first channel from ADC
  f0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <mem_adc>
  f4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <mem_adc+0x1>
  f8:	80 81       	ld	r24, Z
  fa:	8c ec       	ldi	r24, 0xCC	; 204
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x34>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x3a>
 104:	00 00       	nop
		
		_delay_ms(1);

		uint8_t adc_ch1 = mem_adc[1]; // Read second channel from ADC
 106:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <mem_adc>
 10a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <mem_adc+0x1>
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	2f e7       	ldi	r18, 0x7F	; 127
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x4c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x56>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x58>
 122:	db cf       	rjmp	.-74     	; 0xda <main+0x10>

00000124 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR = (1 << SRE); // Enable SRAM
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	80 bf       	out	0x30, r24	; 48
 12c:	08 95       	ret

0000012e <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
 12e:	5f 9b       	sbis	0x0b, 7	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <UART_receive>
    return UDR0;  // Return the received data
 132:	8c b1       	in	r24, 0x0c	; 12
}
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
 13c:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret

00000144 <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 144:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 146:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 14c:	8e e8       	ldi	r24, 0x8E	; 142
 14e:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
 150:	67 e9       	ldi	r22, 0x97	; 151
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	8c e9       	ldi	r24, 0x9C	; 156
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 af 00 	call	0x15e	; 0x15e <fdevopen>
 15c:	08 95       	ret

0000015e <fdevopen>:
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	31 f4       	brne	.+12     	; 0x176 <fdevopen+0x18>
 16a:	61 15       	cp	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	19 f4       	brne	.+6      	; 0x176 <fdevopen+0x18>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	3a c0       	rjmp	.+116    	; 0x1ea <fdevopen+0x8c>
 176:	8b 01       	movw	r16, r22
 178:	ec 01       	movw	r28, r24
 17a:	6e e0       	ldi	r22, 0x0E	; 14
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <calloc>
 186:	fc 01       	movw	r30, r24
 188:	89 2b       	or	r24, r25
 18a:	91 f3       	breq	.-28     	; 0x170 <fdevopen+0x12>
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	83 83       	std	Z+3, r24	; 0x03
 190:	01 15       	cp	r16, r1
 192:	11 05       	cpc	r17, r1
 194:	71 f0       	breq	.+28     	; 0x1b2 <fdevopen+0x54>
 196:	13 87       	std	Z+11, r17	; 0x0b
 198:	02 87       	std	Z+10, r16	; 0x0a
 19a:	81 e8       	ldi	r24, 0x81	; 129
 19c:	83 83       	std	Z+3, r24	; 0x03
 19e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 1a6:	89 2b       	or	r24, r25
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <fdevopen+0x54>
 1aa:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x1>
 1ae:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end>
 1b2:	20 97       	sbiw	r28, 0x00	; 0
 1b4:	c9 f0       	breq	.+50     	; 0x1e8 <fdevopen+0x8a>
 1b6:	d1 87       	std	Z+9, r29	; 0x09
 1b8:	c0 87       	std	Z+8, r28	; 0x08
 1ba:	83 81       	ldd	r24, Z+3	; 0x03
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	83 83       	std	Z+3, r24	; 0x03
 1c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x2>
 1c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x3>
 1c8:	89 2b       	or	r24, r25
 1ca:	71 f4       	brne	.+28     	; 0x1e8 <fdevopen+0x8a>
 1cc:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x3>
 1d0:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x2>
 1d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end+0x4>
 1d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x5>
 1dc:	89 2b       	or	r24, r25
 1de:	21 f4       	brne	.+8      	; 0x1e8 <fdevopen+0x8a>
 1e0:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__data_end+0x5>
 1e4:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__data_end+0x4>
 1e8:	cf 01       	movw	r24, r30
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	08 95       	ret

000001f4 <calloc>:
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	86 9f       	mul	r24, r22
 1fe:	80 01       	movw	r16, r0
 200:	87 9f       	mul	r24, r23
 202:	10 0d       	add	r17, r0
 204:	96 9f       	mul	r25, r22
 206:	10 0d       	add	r17, r0
 208:	11 24       	eor	r1, r1
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 16 01 	call	0x22c	; 0x22c <malloc>
 210:	ec 01       	movw	r28, r24
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	29 f0       	breq	.+10     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 216:	a8 01       	movw	r20, r16
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	0e 94 37 02 	call	0x46e	; 0x46e <memset>
 220:	ce 01       	movw	r24, r28
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	08 95       	ret

0000022c <malloc>:
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	91 05       	cpc	r25, r1
 238:	10 f4       	brcc	.+4      	; 0x23e <malloc+0x12>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__flp>
 242:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__flp+0x1>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	a0 e0       	ldi	r26, 0x00	; 0
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	30 97       	sbiw	r30, 0x00	; 0
 250:	19 f1       	breq	.+70     	; 0x298 <malloc+0x6c>
 252:	40 81       	ld	r20, Z
 254:	51 81       	ldd	r21, Z+1	; 0x01
 256:	02 81       	ldd	r16, Z+2	; 0x02
 258:	13 81       	ldd	r17, Z+3	; 0x03
 25a:	48 17       	cp	r20, r24
 25c:	59 07       	cpc	r21, r25
 25e:	c8 f0       	brcs	.+50     	; 0x292 <malloc+0x66>
 260:	84 17       	cp	r24, r20
 262:	95 07       	cpc	r25, r21
 264:	69 f4       	brne	.+26     	; 0x280 <malloc+0x54>
 266:	10 97       	sbiw	r26, 0x00	; 0
 268:	31 f0       	breq	.+12     	; 0x276 <malloc+0x4a>
 26a:	12 96       	adiw	r26, 0x02	; 2
 26c:	0c 93       	st	X, r16
 26e:	12 97       	sbiw	r26, 0x02	; 2
 270:	13 96       	adiw	r26, 0x03	; 3
 272:	1c 93       	st	X, r17
 274:	27 c0       	rjmp	.+78     	; 0x2c4 <malloc+0x98>
 276:	00 93 10 01 	sts	0x0110, r16	; 0x800110 <__flp>
 27a:	10 93 11 01 	sts	0x0111, r17	; 0x800111 <__flp+0x1>
 27e:	22 c0       	rjmp	.+68     	; 0x2c4 <malloc+0x98>
 280:	21 15       	cp	r18, r1
 282:	31 05       	cpc	r19, r1
 284:	19 f0       	breq	.+6      	; 0x28c <malloc+0x60>
 286:	42 17       	cp	r20, r18
 288:	53 07       	cpc	r21, r19
 28a:	18 f4       	brcc	.+6      	; 0x292 <malloc+0x66>
 28c:	9a 01       	movw	r18, r20
 28e:	bd 01       	movw	r22, r26
 290:	ef 01       	movw	r28, r30
 292:	df 01       	movw	r26, r30
 294:	f8 01       	movw	r30, r16
 296:	db cf       	rjmp	.-74     	; 0x24e <malloc+0x22>
 298:	21 15       	cp	r18, r1
 29a:	31 05       	cpc	r19, r1
 29c:	f9 f0       	breq	.+62     	; 0x2dc <malloc+0xb0>
 29e:	28 1b       	sub	r18, r24
 2a0:	39 0b       	sbc	r19, r25
 2a2:	24 30       	cpi	r18, 0x04	; 4
 2a4:	31 05       	cpc	r19, r1
 2a6:	80 f4       	brcc	.+32     	; 0x2c8 <malloc+0x9c>
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	61 15       	cp	r22, r1
 2ae:	71 05       	cpc	r23, r1
 2b0:	21 f0       	breq	.+8      	; 0x2ba <malloc+0x8e>
 2b2:	fb 01       	movw	r30, r22
 2b4:	93 83       	std	Z+3, r25	; 0x03
 2b6:	82 83       	std	Z+2, r24	; 0x02
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <malloc+0x96>
 2ba:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__flp+0x1>
 2be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__flp>
 2c2:	fe 01       	movw	r30, r28
 2c4:	32 96       	adiw	r30, 0x02	; 2
 2c6:	44 c0       	rjmp	.+136    	; 0x350 <malloc+0x124>
 2c8:	fe 01       	movw	r30, r28
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	81 93       	st	Z+, r24
 2d0:	91 93       	st	Z+, r25
 2d2:	22 50       	subi	r18, 0x02	; 2
 2d4:	31 09       	sbc	r19, r1
 2d6:	39 83       	std	Y+1, r19	; 0x01
 2d8:	28 83       	st	Y, r18
 2da:	3a c0       	rjmp	.+116    	; 0x350 <malloc+0x124>
 2dc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 2e0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 2e4:	23 2b       	or	r18, r19
 2e6:	41 f4       	brne	.+16     	; 0x2f8 <malloc+0xcc>
 2e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 2ec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 2f0:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__brkval+0x1>
 2f4:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__brkval>
 2f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 300:	21 15       	cp	r18, r1
 302:	31 05       	cpc	r19, r1
 304:	41 f4       	brne	.+16     	; 0x316 <malloc+0xea>
 306:	2d b7       	in	r18, 0x3d	; 61
 308:	3e b7       	in	r19, 0x3e	; 62
 30a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 30e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 312:	24 1b       	sub	r18, r20
 314:	35 0b       	sbc	r19, r21
 316:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__brkval>
 31a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__brkval+0x1>
 31e:	e2 17       	cp	r30, r18
 320:	f3 07       	cpc	r31, r19
 322:	a0 f4       	brcc	.+40     	; 0x34c <malloc+0x120>
 324:	2e 1b       	sub	r18, r30
 326:	3f 0b       	sbc	r19, r31
 328:	28 17       	cp	r18, r24
 32a:	39 07       	cpc	r19, r25
 32c:	78 f0       	brcs	.+30     	; 0x34c <malloc+0x120>
 32e:	ac 01       	movw	r20, r24
 330:	4e 5f       	subi	r20, 0xFE	; 254
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	24 17       	cp	r18, r20
 336:	35 07       	cpc	r19, r21
 338:	48 f0       	brcs	.+18     	; 0x34c <malloc+0x120>
 33a:	4e 0f       	add	r20, r30
 33c:	5f 1f       	adc	r21, r31
 33e:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <__brkval+0x1>
 342:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <__brkval>
 346:	81 93       	st	Z+, r24
 348:	91 93       	st	Z+, r25
 34a:	02 c0       	rjmp	.+4      	; 0x350 <malloc+0x124>
 34c:	e0 e0       	ldi	r30, 0x00	; 0
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	cf 01       	movw	r24, r30
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <free>:
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	09 f4       	brne	.+2      	; 0x366 <free+0xa>
 364:	81 c0       	rjmp	.+258    	; 0x468 <__DATA_REGION_LENGTH__+0x68>
 366:	fc 01       	movw	r30, r24
 368:	32 97       	sbiw	r30, 0x02	; 2
 36a:	13 82       	std	Z+3, r1	; 0x03
 36c:	12 82       	std	Z+2, r1	; 0x02
 36e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__flp>
 372:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__flp+0x1>
 376:	10 97       	sbiw	r26, 0x00	; 0
 378:	81 f4       	brne	.+32     	; 0x39a <free+0x3e>
 37a:	20 81       	ld	r18, Z
 37c:	31 81       	ldd	r19, Z+1	; 0x01
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 386:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 38a:	28 17       	cp	r18, r24
 38c:	39 07       	cpc	r19, r25
 38e:	51 f5       	brne	.+84     	; 0x3e4 <free+0x88>
 390:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__brkval+0x1>
 394:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__brkval>
 398:	67 c0       	rjmp	.+206    	; 0x468 <__DATA_REGION_LENGTH__+0x68>
 39a:	ed 01       	movw	r28, r26
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	ce 17       	cp	r28, r30
 3a2:	df 07       	cpc	r29, r31
 3a4:	40 f4       	brcc	.+16     	; 0x3b6 <free+0x5a>
 3a6:	4a 81       	ldd	r20, Y+2	; 0x02
 3a8:	5b 81       	ldd	r21, Y+3	; 0x03
 3aa:	9e 01       	movw	r18, r28
 3ac:	41 15       	cp	r20, r1
 3ae:	51 05       	cpc	r21, r1
 3b0:	f1 f0       	breq	.+60     	; 0x3ee <free+0x92>
 3b2:	ea 01       	movw	r28, r20
 3b4:	f5 cf       	rjmp	.-22     	; 0x3a0 <free+0x44>
 3b6:	d3 83       	std	Z+3, r29	; 0x03
 3b8:	c2 83       	std	Z+2, r28	; 0x02
 3ba:	40 81       	ld	r20, Z
 3bc:	51 81       	ldd	r21, Z+1	; 0x01
 3be:	84 0f       	add	r24, r20
 3c0:	95 1f       	adc	r25, r21
 3c2:	c8 17       	cp	r28, r24
 3c4:	d9 07       	cpc	r29, r25
 3c6:	59 f4       	brne	.+22     	; 0x3de <free+0x82>
 3c8:	88 81       	ld	r24, Y
 3ca:	99 81       	ldd	r25, Y+1	; 0x01
 3cc:	84 0f       	add	r24, r20
 3ce:	95 1f       	adc	r25, r21
 3d0:	02 96       	adiw	r24, 0x02	; 2
 3d2:	91 83       	std	Z+1, r25	; 0x01
 3d4:	80 83       	st	Z, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	9b 81       	ldd	r25, Y+3	; 0x03
 3da:	93 83       	std	Z+3, r25	; 0x03
 3dc:	82 83       	std	Z+2, r24	; 0x02
 3de:	21 15       	cp	r18, r1
 3e0:	31 05       	cpc	r19, r1
 3e2:	29 f4       	brne	.+10     	; 0x3ee <free+0x92>
 3e4:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__flp+0x1>
 3e8:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__flp>
 3ec:	3d c0       	rjmp	.+122    	; 0x468 <__DATA_REGION_LENGTH__+0x68>
 3ee:	e9 01       	movw	r28, r18
 3f0:	fb 83       	std	Y+3, r31	; 0x03
 3f2:	ea 83       	std	Y+2, r30	; 0x02
 3f4:	49 91       	ld	r20, Y+
 3f6:	59 91       	ld	r21, Y+
 3f8:	c4 0f       	add	r28, r20
 3fa:	d5 1f       	adc	r29, r21
 3fc:	ec 17       	cp	r30, r28
 3fe:	fd 07       	cpc	r31, r29
 400:	61 f4       	brne	.+24     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 402:	80 81       	ld	r24, Z
 404:	91 81       	ldd	r25, Z+1	; 0x01
 406:	84 0f       	add	r24, r20
 408:	95 1f       	adc	r25, r21
 40a:	02 96       	adiw	r24, 0x02	; 2
 40c:	e9 01       	movw	r28, r18
 40e:	99 83       	std	Y+1, r25	; 0x01
 410:	88 83       	st	Y, r24
 412:	82 81       	ldd	r24, Z+2	; 0x02
 414:	93 81       	ldd	r25, Z+3	; 0x03
 416:	9b 83       	std	Y+3, r25	; 0x03
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	e0 e0       	ldi	r30, 0x00	; 0
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	12 96       	adiw	r26, 0x02	; 2
 420:	8d 91       	ld	r24, X+
 422:	9c 91       	ld	r25, X
 424:	13 97       	sbiw	r26, 0x03	; 3
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	19 f0       	breq	.+6      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 42a:	fd 01       	movw	r30, r26
 42c:	dc 01       	movw	r26, r24
 42e:	f7 cf       	rjmp	.-18     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 430:	8d 91       	ld	r24, X+
 432:	9c 91       	ld	r25, X
 434:	11 97       	sbiw	r26, 0x01	; 1
 436:	9d 01       	movw	r18, r26
 438:	2e 5f       	subi	r18, 0xFE	; 254
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
 43c:	82 0f       	add	r24, r18
 43e:	93 1f       	adc	r25, r19
 440:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__brkval>
 444:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__brkval+0x1>
 448:	28 17       	cp	r18, r24
 44a:	39 07       	cpc	r19, r25
 44c:	69 f4       	brne	.+26     	; 0x468 <__DATA_REGION_LENGTH__+0x68>
 44e:	30 97       	sbiw	r30, 0x00	; 0
 450:	29 f4       	brne	.+10     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 452:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__flp+0x1>
 456:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__flp>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__DATA_REGION_LENGTH__+0x60>
 45c:	13 82       	std	Z+3, r1	; 0x03
 45e:	12 82       	std	Z+2, r1	; 0x02
 460:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__brkval+0x1>
 464:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__brkval>
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <memset>:
 46e:	dc 01       	movw	r26, r24
 470:	01 c0       	rjmp	.+2      	; 0x474 <memset+0x6>
 472:	6d 93       	st	X+, r22
 474:	41 50       	subi	r20, 0x01	; 1
 476:	50 40       	sbci	r21, 0x00	; 0
 478:	e0 f7       	brcc	.-8      	; 0x472 <memset+0x4>
 47a:	08 95       	ret

0000047c <_exit>:
 47c:	f8 94       	cli

0000047e <__stop_program>:
 47e:	ff cf       	rjmp	.-2      	; 0x47e <__stop_program>
