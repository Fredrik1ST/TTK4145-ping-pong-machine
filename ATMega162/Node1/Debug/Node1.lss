
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b26  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dde  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b53  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00003bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000672  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010df  00000000  00000000  000045ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000056ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e4       	ldi	r30, 0x46	; 70
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  a6:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include <avr/io.h>


void adc_init(){
	// Set pin as output
	DDRD |= (1<<DDD4);
  ae:	8c 9a       	sbi	0x11, 4	; 17
	
	// Toggle output pin on compare match with counter
	TCCR3A = (1<<COM3A0);
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7fc08b>
	
	// No clock prescaling on counter (i.e. update every clock cycle)
	// Set counter mode to CTC (clear on match)
	TCCR3B = (1<<WGM32)|(1<<CS30);
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7fc08a>
	
	// Value to be matched (0 = toggle output each cycle)
	OCR3A = 0;
  bc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7fc087>
  c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7fc086>
  c4:	08 95       	ret

000000c6 <gamepad_init>:
#include "adc.h"
#include "gamepad.h"


void gamepad_init(){
	PORTB |= (1 << PB2); // Set pullup resistor for input
  c6:	c2 9a       	sbi	0x18, 2	; 24
	DDRB &= ~(0 << DDB2); // Set PB2 to 0 (input for joystick button)
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret

000000ce <oled_write_data>:
void oled_write_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
		oled_write_data(0x01);
	}
}
  ce:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x10f0>
  d2:	08 95       	ret

000000d4 <oled_init>:
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f0 e1       	ldi	r31, 0x10	; 16
  d8:	8e ea       	ldi	r24, 0xAE	; 174
  da:	80 83       	st	Z, r24
  dc:	81 ea       	ldi	r24, 0xA1	; 161
  de:	80 83       	st	Z, r24
  e0:	8a ed       	ldi	r24, 0xDA	; 218
  e2:	80 83       	st	Z, r24
  e4:	82 e1       	ldi	r24, 0x12	; 18
  e6:	80 83       	st	Z, r24
  e8:	88 ec       	ldi	r24, 0xC8	; 200
  ea:	80 83       	st	Z, r24
  ec:	88 ea       	ldi	r24, 0xA8	; 168
  ee:	80 83       	st	Z, r24
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	80 83       	st	Z, r24
  f4:	85 ed       	ldi	r24, 0xD5	; 213
  f6:	80 83       	st	Z, r24
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	81 e8       	ldi	r24, 0x81	; 129
  fe:	80 83       	st	Z, r24
 100:	80 e5       	ldi	r24, 0x50	; 80
 102:	80 83       	st	Z, r24
 104:	89 ed       	ldi	r24, 0xD9	; 217
 106:	80 83       	st	Z, r24
 108:	81 e2       	ldi	r24, 0x21	; 33
 10a:	80 83       	st	Z, r24
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	80 83       	st	Z, r24
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
 114:	8b ed       	ldi	r24, 0xDB	; 219
 116:	80 83       	st	Z, r24
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	80 83       	st	Z, r24
 11c:	8d ea       	ldi	r24, 0xAD	; 173
 11e:	80 83       	st	Z, r24
 120:	10 82       	st	Z, r1
 122:	84 ea       	ldi	r24, 0xA4	; 164
 124:	80 83       	st	Z, r24
 126:	86 ea       	ldi	r24, 0xA6	; 166
 128:	80 83       	st	Z, r24
 12a:	8f ea       	ldi	r24, 0xAF	; 175
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <oled_goto_page>:
 130:	87 70       	andi	r24, 0x07	; 7
 132:	80 6b       	ori	r24, 0xB0	; 176
 134:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xef0>
 138:	08 95       	ret

0000013a <oled_goto_col>:
 13a:	98 2f       	mov	r25, r24
 13c:	9f 70       	andi	r25, 0x0F	; 15
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f0 e1       	ldi	r31, 0x10	; 16
 142:	90 83       	st	Z, r25
 144:	82 95       	swap	r24
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <oled_pos>:
 14c:	cf 93       	push	r28
 14e:	c6 2f       	mov	r28, r22
 150:	0e 94 98 00 	call	0x130	; 0x130 <oled_goto_page>
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 9d 00 	call	0x13a	; 0x13a <oled_goto_col>
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <oled_clear_line>:


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
 15e:	0e 94 98 00 	call	0x130	; 0x130 <oled_goto_page>
 162:	80 e0       	ldi	r24, 0x00	; 0
#include "def.h"


void oled_write_data(uint8_t data){
    volatile char* adr = (char*) DEF_ADR_OLED_DATA;
    adr[0] = data;
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f2 e1       	ldi	r31, 0x12	; 18
 168:	10 82       	st	Z, r1
}


void oled_clear_line(uint8_t page){
	oled_goto_page(page);
	for (uint8_t i = 0; i < 128; i++){
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 38       	cpi	r24, 0x80	; 128
 16e:	e1 f7       	brne	.-8      	; 0x168 <oled_clear_line+0xa>
		oled_write_data(0x00);
	}
}
 170:	08 95       	ret

00000172 <oled_reset>:


void oled_reset(){
 172:	cf 93       	push	r28
	for (uint8_t i=0; i < 8; i++){
 174:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 af 00 	call	0x15e	; 0x15e <oled_clear_line>
	}
}


void oled_reset(){
	for (uint8_t i=0; i < 8; i++){
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	c8 30       	cpi	r28, 0x08	; 8
 180:	d1 f7       	brne	.-12     	; 0x176 <oled_reset+0x4>
		oled_clear_line(i);
	}
}
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:
volatile char *mem_adc = (char *) 0x1400; // Start address for the ADC
volatile char *mem_oled_dat = (char *) 0x1200; // Start address for the OLED Data
volatile char *mem_oled_cmd = (char *) 0x1000; // Start address for the OLED commands

int main(void) {
	UART_init(DEF_UBBR);
 186:	8f e1       	ldi	r24, 0x1F	; 31
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 05 01 	call	0x20a	; 0x20a <UART_init>
	SRAM_init();
 18e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <SRAM_init>
	adc_init();
 192:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	gamepad_init();
 196:	0e 94 63 00 	call	0xc6	; 0xc6 <gamepad_init>
	oled_init();
 19a:	0e 94 6a 00 	call	0xd4	; 0xd4 <oled_init>
	
	while(1){
		oled_reset();
 19e:	0e 94 b9 00 	call	0x172	; 0x172 <oled_reset>
		oled_pos(0x1,0x0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 a6 00 	call	0x14c	; 0x14c <oled_pos>
 1aa:	c0 e4       	ldi	r28, 0x40	; 64
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i<64; i++){
			oled_write_data(0x1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 67 00 	call	0xce	; 0xce <oled_write_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	9f e5       	ldi	r25, 0x5F	; 95
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x32>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x38>
 1be:	00 00       	nop
 1c0:	21 97       	sbiw	r28, 0x01	; 1
	oled_init();
	
	while(1){
		oled_reset();
		oled_pos(0x1,0x0);
		for (int i = 0; i<64; i++){
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <main+0x28>
			oled_write_data(0x1);
			_delay_ms(20);
		}
		oled_pos(0x2,0x127);
 1c4:	67 e2       	ldi	r22, 0x27	; 39
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 a6 00 	call	0x14c	; 0x14c <oled_pos>
 1cc:	cf e3       	ldi	r28, 0x3F	; 63
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 127; i>64; i--){
			oled_write_data(0x1);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 67 00 	call	0xce	; 0xce <oled_write_data>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	9f e5       	ldi	r25, 0x5F	; 95
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x54>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x5a>
 1e0:	00 00       	nop
 1e2:	21 97       	sbiw	r28, 0x01	; 1
		for (int i = 0; i<64; i++){
			oled_write_data(0x1);
			_delay_ms(20);
		}
		oled_pos(0x2,0x127);
		for (int i = 127; i>64; i--){
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <main+0x4a>
 1e6:	db cf       	rjmp	.-74     	; 0x19e <main+0x18>

000001e8 <SRAM_init>:
#include <avr/io.h>
#include <inttypes.h> // Needed for uint16_t


void SRAM_init() {
	MCUCR |= (1 << SRE); // Enable SRAM
 1e8:	85 b7       	in	r24, 0x35	; 53
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	85 bf       	out	0x35, r24	; 53
	SFIOR = (1 << XMM2); // Masks PC4-PC7 to make sure JTAG remains untouched
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	80 bf       	out	0x30, r24	; 48
 1f2:	08 95       	ret

000001f4 <UART_receive>:
#include <stdio.h>
#include <avr/io.h>


int UART_receive(FILE * file) {
    while (!(UCSR0A & (1 << RXC0)));  // Wait until data is available to read
 1f4:	5f 9b       	sbis	0x0b, 7	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <UART_receive>
    return UDR0;  // Return the received data
 1f8:	8c b1       	in	r24, 0x0c	; 12
}
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret

000001fe <UART_transmit>:


int UART_transmit(char data, FILE * file) {
    while (!(UCSR0A & (1 << UDRE0)));  // Wait for the data register to be empty
 1fe:	5d 9b       	sbis	0x0b, 5	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <UART_transmit>
    UDR0 = data;  // Load the data into the register for transmission
 202:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret

0000020a <UART_init>:


void UART_init(unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 20a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 20c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 20e:	88 e1       	ldi	r24, 0x18	; 24
 210:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit, synchronous mode */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
 212:	8e e8       	ldi	r24, 0x8E	; 142
 214:	80 bd       	out	0x20, r24	; 32
	// Make the transmit & receive functions write to a stream / file
	fdevopen(UART_transmit, UART_receive);
 216:	6a ef       	ldi	r22, 0xFA	; 250
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 12 01 	call	0x224	; 0x224 <fdevopen>
 222:	08 95       	ret

00000224 <fdevopen>:
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	31 f4       	brne	.+12     	; 0x23c <fdevopen+0x18>
 230:	61 15       	cp	r22, r1
 232:	71 05       	cpc	r23, r1
 234:	19 f4       	brne	.+6      	; 0x23c <fdevopen+0x18>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	3a c0       	rjmp	.+116    	; 0x2b0 <fdevopen+0x8c>
 23c:	8b 01       	movw	r16, r22
 23e:	ec 01       	movw	r28, r24
 240:	6e e0       	ldi	r22, 0x0E	; 14
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 5d 01 	call	0x2ba	; 0x2ba <calloc>
 24c:	fc 01       	movw	r30, r24
 24e:	89 2b       	or	r24, r25
 250:	91 f3       	breq	.-28     	; 0x236 <fdevopen+0x12>
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	83 83       	std	Z+3, r24	; 0x03
 256:	01 15       	cp	r16, r1
 258:	11 05       	cpc	r17, r1
 25a:	71 f0       	breq	.+28     	; 0x278 <fdevopen+0x54>
 25c:	13 87       	std	Z+11, r17	; 0x0b
 25e:	02 87       	std	Z+10, r16	; 0x0a
 260:	81 e8       	ldi	r24, 0x81	; 129
 262:	83 83       	std	Z+3, r24	; 0x03
 264:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 268:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 26c:	89 2b       	or	r24, r25
 26e:	21 f4       	brne	.+8      	; 0x278 <fdevopen+0x54>
 270:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 274:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 278:	20 97       	sbiw	r28, 0x00	; 0
 27a:	c9 f0       	breq	.+50     	; 0x2ae <fdevopen+0x8a>
 27c:	d1 87       	std	Z+9, r29	; 0x09
 27e:	c0 87       	std	Z+8, r28	; 0x08
 280:	83 81       	ldd	r24, Z+3	; 0x03
 282:	82 60       	ori	r24, 0x02	; 2
 284:	83 83       	std	Z+3, r24	; 0x03
 286:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 28a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 28e:	89 2b       	or	r24, r25
 290:	71 f4       	brne	.+28     	; 0x2ae <fdevopen+0x8a>
 292:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__data_end+0x3>
 296:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__data_end+0x2>
 29a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end+0x4>
 29e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x5>
 2a2:	89 2b       	or	r24, r25
 2a4:	21 f4       	brne	.+8      	; 0x2ae <fdevopen+0x8a>
 2a6:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__data_end+0x5>
 2aa:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end+0x4>
 2ae:	cf 01       	movw	r24, r30
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <calloc>:
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	86 9f       	mul	r24, r22
 2c4:	80 01       	movw	r16, r0
 2c6:	87 9f       	mul	r24, r23
 2c8:	10 0d       	add	r17, r0
 2ca:	96 9f       	mul	r25, r22
 2cc:	10 0d       	add	r17, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	c8 01       	movw	r24, r16
 2d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <malloc>
 2d6:	ec 01       	movw	r28, r24
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	29 f0       	breq	.+10     	; 0x2e6 <calloc+0x2c>
 2dc:	a8 01       	movw	r20, r16
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	0e 94 9a 02 	call	0x534	; 0x534 <memset>
 2e6:	ce 01       	movw	r24, r28
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <malloc>:
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	91 05       	cpc	r25, r1
 2fe:	10 f4       	brcc	.+4      	; 0x304 <malloc+0x12>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 308:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	a0 e0       	ldi	r26, 0x00	; 0
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	30 97       	sbiw	r30, 0x00	; 0
 316:	19 f1       	breq	.+70     	; 0x35e <malloc+0x6c>
 318:	40 81       	ld	r20, Z
 31a:	51 81       	ldd	r21, Z+1	; 0x01
 31c:	02 81       	ldd	r16, Z+2	; 0x02
 31e:	13 81       	ldd	r17, Z+3	; 0x03
 320:	48 17       	cp	r20, r24
 322:	59 07       	cpc	r21, r25
 324:	c8 f0       	brcs	.+50     	; 0x358 <malloc+0x66>
 326:	84 17       	cp	r24, r20
 328:	95 07       	cpc	r25, r21
 32a:	69 f4       	brne	.+26     	; 0x346 <malloc+0x54>
 32c:	10 97       	sbiw	r26, 0x00	; 0
 32e:	31 f0       	breq	.+12     	; 0x33c <malloc+0x4a>
 330:	12 96       	adiw	r26, 0x02	; 2
 332:	0c 93       	st	X, r16
 334:	12 97       	sbiw	r26, 0x02	; 2
 336:	13 96       	adiw	r26, 0x03	; 3
 338:	1c 93       	st	X, r17
 33a:	27 c0       	rjmp	.+78     	; 0x38a <malloc+0x98>
 33c:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 340:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 344:	22 c0       	rjmp	.+68     	; 0x38a <malloc+0x98>
 346:	21 15       	cp	r18, r1
 348:	31 05       	cpc	r19, r1
 34a:	19 f0       	breq	.+6      	; 0x352 <malloc+0x60>
 34c:	42 17       	cp	r20, r18
 34e:	53 07       	cpc	r21, r19
 350:	18 f4       	brcc	.+6      	; 0x358 <malloc+0x66>
 352:	9a 01       	movw	r18, r20
 354:	bd 01       	movw	r22, r26
 356:	ef 01       	movw	r28, r30
 358:	df 01       	movw	r26, r30
 35a:	f8 01       	movw	r30, r16
 35c:	db cf       	rjmp	.-74     	; 0x314 <malloc+0x22>
 35e:	21 15       	cp	r18, r1
 360:	31 05       	cpc	r19, r1
 362:	f9 f0       	breq	.+62     	; 0x3a2 <malloc+0xb0>
 364:	28 1b       	sub	r18, r24
 366:	39 0b       	sbc	r19, r25
 368:	24 30       	cpi	r18, 0x04	; 4
 36a:	31 05       	cpc	r19, r1
 36c:	80 f4       	brcc	.+32     	; 0x38e <malloc+0x9c>
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	9b 81       	ldd	r25, Y+3	; 0x03
 372:	61 15       	cp	r22, r1
 374:	71 05       	cpc	r23, r1
 376:	21 f0       	breq	.+8      	; 0x380 <malloc+0x8e>
 378:	fb 01       	movw	r30, r22
 37a:	93 83       	std	Z+3, r25	; 0x03
 37c:	82 83       	std	Z+2, r24	; 0x02
 37e:	04 c0       	rjmp	.+8      	; 0x388 <malloc+0x96>
 380:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 384:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 388:	fe 01       	movw	r30, r28
 38a:	32 96       	adiw	r30, 0x02	; 2
 38c:	44 c0       	rjmp	.+136    	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 38e:	fe 01       	movw	r30, r28
 390:	e2 0f       	add	r30, r18
 392:	f3 1f       	adc	r31, r19
 394:	81 93       	st	Z+, r24
 396:	91 93       	st	Z+, r25
 398:	22 50       	subi	r18, 0x02	; 2
 39a:	31 09       	sbc	r19, r1
 39c:	39 83       	std	Y+1, r19	; 0x01
 39e:	28 83       	st	Y, r18
 3a0:	3a c0       	rjmp	.+116    	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 3a2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 3a6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 3aa:	23 2b       	or	r18, r19
 3ac:	41 f4       	brne	.+16     	; 0x3be <malloc+0xcc>
 3ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3b2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3b6:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 3ba:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 3be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c6:	21 15       	cp	r18, r1
 3c8:	31 05       	cpc	r19, r1
 3ca:	41 f4       	brne	.+16     	; 0x3dc <malloc+0xea>
 3cc:	2d b7       	in	r18, 0x3d	; 61
 3ce:	3e b7       	in	r19, 0x3e	; 62
 3d0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 3d4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 3d8:	24 1b       	sub	r18, r20
 3da:	35 0b       	sbc	r19, r21
 3dc:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 3e0:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 3e4:	e2 17       	cp	r30, r18
 3e6:	f3 07       	cpc	r31, r19
 3e8:	a0 f4       	brcc	.+40     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 3ea:	2e 1b       	sub	r18, r30
 3ec:	3f 0b       	sbc	r19, r31
 3ee:	28 17       	cp	r18, r24
 3f0:	39 07       	cpc	r19, r25
 3f2:	78 f0       	brcs	.+30     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 3f4:	ac 01       	movw	r20, r24
 3f6:	4e 5f       	subi	r20, 0xFE	; 254
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	24 17       	cp	r18, r20
 3fc:	35 07       	cpc	r19, r21
 3fe:	48 f0       	brcs	.+18     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 400:	4e 0f       	add	r20, r30
 402:	5f 1f       	adc	r21, r31
 404:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 408:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 40c:	81 93       	st	Z+, r24
 40e:	91 93       	st	Z+, r25
 410:	02 c0       	rjmp	.+4      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 412:	e0 e0       	ldi	r30, 0x00	; 0
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	cf 01       	movw	r24, r30
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	08 95       	ret

00000422 <free>:
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	09 f4       	brne	.+2      	; 0x42c <free+0xa>
 42a:	81 c0       	rjmp	.+258    	; 0x52e <__stack+0x2f>
 42c:	fc 01       	movw	r30, r24
 42e:	32 97       	sbiw	r30, 0x02	; 2
 430:	13 82       	std	Z+3, r1	; 0x03
 432:	12 82       	std	Z+2, r1	; 0x02
 434:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 438:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 43c:	10 97       	sbiw	r26, 0x00	; 0
 43e:	81 f4       	brne	.+32     	; 0x460 <free+0x3e>
 440:	20 81       	ld	r18, Z
 442:	31 81       	ldd	r19, Z+1	; 0x01
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 44c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 450:	28 17       	cp	r18, r24
 452:	39 07       	cpc	r19, r25
 454:	51 f5       	brne	.+84     	; 0x4aa <free+0x88>
 456:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 45a:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 45e:	67 c0       	rjmp	.+206    	; 0x52e <__stack+0x2f>
 460:	ed 01       	movw	r28, r26
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	ce 17       	cp	r28, r30
 468:	df 07       	cpc	r29, r31
 46a:	40 f4       	brcc	.+16     	; 0x47c <free+0x5a>
 46c:	4a 81       	ldd	r20, Y+2	; 0x02
 46e:	5b 81       	ldd	r21, Y+3	; 0x03
 470:	9e 01       	movw	r18, r28
 472:	41 15       	cp	r20, r1
 474:	51 05       	cpc	r21, r1
 476:	f1 f0       	breq	.+60     	; 0x4b4 <free+0x92>
 478:	ea 01       	movw	r28, r20
 47a:	f5 cf       	rjmp	.-22     	; 0x466 <free+0x44>
 47c:	d3 83       	std	Z+3, r29	; 0x03
 47e:	c2 83       	std	Z+2, r28	; 0x02
 480:	40 81       	ld	r20, Z
 482:	51 81       	ldd	r21, Z+1	; 0x01
 484:	84 0f       	add	r24, r20
 486:	95 1f       	adc	r25, r21
 488:	c8 17       	cp	r28, r24
 48a:	d9 07       	cpc	r29, r25
 48c:	59 f4       	brne	.+22     	; 0x4a4 <free+0x82>
 48e:	88 81       	ld	r24, Y
 490:	99 81       	ldd	r25, Y+1	; 0x01
 492:	84 0f       	add	r24, r20
 494:	95 1f       	adc	r25, r21
 496:	02 96       	adiw	r24, 0x02	; 2
 498:	91 83       	std	Z+1, r25	; 0x01
 49a:	80 83       	st	Z, r24
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	9b 81       	ldd	r25, Y+3	; 0x03
 4a0:	93 83       	std	Z+3, r25	; 0x03
 4a2:	82 83       	std	Z+2, r24	; 0x02
 4a4:	21 15       	cp	r18, r1
 4a6:	31 05       	cpc	r19, r1
 4a8:	29 f4       	brne	.+10     	; 0x4b4 <free+0x92>
 4aa:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 4ae:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 4b2:	3d c0       	rjmp	.+122    	; 0x52e <__stack+0x2f>
 4b4:	e9 01       	movw	r28, r18
 4b6:	fb 83       	std	Y+3, r31	; 0x03
 4b8:	ea 83       	std	Y+2, r30	; 0x02
 4ba:	49 91       	ld	r20, Y+
 4bc:	59 91       	ld	r21, Y+
 4be:	c4 0f       	add	r28, r20
 4c0:	d5 1f       	adc	r29, r21
 4c2:	ec 17       	cp	r30, r28
 4c4:	fd 07       	cpc	r31, r29
 4c6:	61 f4       	brne	.+24     	; 0x4e0 <free+0xbe>
 4c8:	80 81       	ld	r24, Z
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	84 0f       	add	r24, r20
 4ce:	95 1f       	adc	r25, r21
 4d0:	02 96       	adiw	r24, 0x02	; 2
 4d2:	e9 01       	movw	r28, r18
 4d4:	99 83       	std	Y+1, r25	; 0x01
 4d6:	88 83       	st	Y, r24
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	9b 83       	std	Y+3, r25	; 0x03
 4de:	8a 83       	std	Y+2, r24	; 0x02
 4e0:	e0 e0       	ldi	r30, 0x00	; 0
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	12 96       	adiw	r26, 0x02	; 2
 4e6:	8d 91       	ld	r24, X+
 4e8:	9c 91       	ld	r25, X
 4ea:	13 97       	sbiw	r26, 0x03	; 3
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <free+0xd4>
 4f0:	fd 01       	movw	r30, r26
 4f2:	dc 01       	movw	r26, r24
 4f4:	f7 cf       	rjmp	.-18     	; 0x4e4 <free+0xc2>
 4f6:	8d 91       	ld	r24, X+
 4f8:	9c 91       	ld	r25, X
 4fa:	11 97       	sbiw	r26, 0x01	; 1
 4fc:	9d 01       	movw	r18, r26
 4fe:	2e 5f       	subi	r18, 0xFE	; 254
 500:	3f 4f       	sbci	r19, 0xFF	; 255
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 50a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 50e:	28 17       	cp	r18, r24
 510:	39 07       	cpc	r19, r25
 512:	69 f4       	brne	.+26     	; 0x52e <__stack+0x2f>
 514:	30 97       	sbiw	r30, 0x00	; 0
 516:	29 f4       	brne	.+10     	; 0x522 <__stack+0x23>
 518:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 51c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 520:	02 c0       	rjmp	.+4      	; 0x526 <__stack+0x27>
 522:	13 82       	std	Z+3, r1	; 0x03
 524:	12 82       	std	Z+2, r1	; 0x02
 526:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 52a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <memset>:
 534:	dc 01       	movw	r26, r24
 536:	01 c0       	rjmp	.+2      	; 0x53a <memset+0x6>
 538:	6d 93       	st	X+, r22
 53a:	41 50       	subi	r20, 0x01	; 1
 53c:	50 40       	sbci	r21, 0x00	; 0
 53e:	e0 f7       	brcc	.-8      	; 0x538 <memset+0x4>
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
